(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{142:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"content"},[n("h3",{attrs:{id:"利用h5新的api创建视频录制功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用h5新的api创建视频录制功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 利用H5新的API创建视频录制功能")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("var recorder, mediaStream;\n\n// 用于存放录制后的音频文件对象和录制结束回调\nvar recorderFile, stopRecordCallback;\n\n// 用于存放是否开启了视频录制\nvar videoEnabled = false;\n\nconst  getUserMedia = function (videoEnable, audioEnable, callback) { // 处理兼容性的问题\n  // 这个函数主要是用来处理兼容性的问题。 提供了3个参数，第一个参数：是否开启视频权限 第二个参数： 是否开启录音权限 第三个参数： 获取到媒体流后// 的回调处理函数\n  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n      || navigator.msGetUserMedia || window.getUserMedia;\n  var constraints = {video: videoEnable, audio: audioEnable};\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        // navigadtor.mediaDevices.getUserMedia返回一个promise对象\n          callback(false, stream);\n      })['catch'](function(err) {\n          callback(err);\n      });\n  } else if (navigator.getUserMedia) {\n      navigator.getUserMedia(constraints, function (stream) {\n          callback(false, stream);\n      }, function (err) {\n          callback(err);\n      });\n  } else {\n      callback(new Error('Not support userMedia'));\n  }\n}\nconst closeStream =  function (stream) {\n  if (typeof stream.stop === 'function') {\n      stream.stop()\n      // 关闭媒体流\n  }\n  else {\n      let trackList = [stream.getAudioTracks(), stream.getVideoTracks()];\n\n      for (let i = 0; i < trackList.length; i++) {\n          let tracks = trackList[i];\n          if (tracks && tracks.length > 0) {\n              for (let j = 0; j < tracks.length; j++) {\n                  let track = tracks[j];\n                  if (typeof track.stop === 'function') {\n                      track.stop();\n                  }\n              }\n          }\n      }\n  }\n}\nfunction startRecord(enableVideo) { // 开始录制函数\n  videoEnabled = enableVideo;\n  getUserMedia(enableVideo, videoEnabled, function (err, stream) {\n      if (err) {\n          throw err;\n      } else {\n        console.log(\"获取到视频流\", stream)\n          // 通过 MediaRecorder 记录获取到的媒体流\n          recorder = new MediaRecorder(stream);\n          mediaStream = stream;\n          var chunks = [], startTime = 0;\n          recorder.ondataavailable = function(e) {\n              chunks.push(e.data);\n              // 当录制事件结束后调用，返回Blob对象\n          };\n          recorder.onstop = function (e) {\n            // 录制事件结束回调函数， 保存录制文件\n              recorderFile = new Blob(chunks, { 'type' : recorder.mimeType });\n              chunks = [];\n              if (null != stopRecordCallback) {\n                  stopRecordCallback();\n              }\n          };\n          recorder.start();\n      }\n  });\n}\n\n// 停止录制\nconst stopRecord =  function (callback) {\n  stopRecordCallback = callback;\n  // 终止录制器\n  recorder.stop();\n  // 关闭媒体流\n  closeStream(mediaStream);\n}\n\n// 播放录制的音频\nconst playRecord =  function playRecord() {\n  var url = URL.createObjectURL(recorderFile);\n  // 创建一个URL string，函数中的参数必须是一个File对象或者是一个 Blob对象\n  console.log(\"URL STRING\", url)\n  var dom = document.createElement(videoEnabled ? 'video' : 'audio');\n  // 如果开启了视频权限，则创建一个视频的元素， 如果没有则创建一个audio元素\n  dom.autoplay = true;\n  dom.src = url;\n  if (videoEnabled) {\n      dom.width = 640;\n      dom.height = 480;\n      dom.style.zIndex = '9999999';\n      dom.style.position = 'fixed';\n      dom.style.left = '0';\n      dom.style.right = '0';\n      dom.style.top = '0';\n      dom.style.bottom = '0';\n      dom.style.margin = 'auto';\n      document.body.appendChild(dom);\n  }\n}\nstartRecord(true);\n// 5秒后结束录制并播放\nsetTimeout(function(){\n    // 结束\n    stopRecord(function() {\n        // 播放\n        playRecord();\n    });\n}, 5000);\n")])])])])}],!1,null,null,null);n.default=r.exports}}]);