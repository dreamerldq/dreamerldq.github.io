(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{149:function(n,t,e){"use strict";e.r(t);var i=e(0),a=Object(i.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"用原生js实现todolist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用原生js实现todolist","aria-hidden":"true"}},[n._v("#")]),n._v(" 用原生JS实现todolist")]),e("p",[n._v("todolist具备以下几个功能点：")]),e("ul",[e("li",[n._v("拥有一个输入框，可以输入待办事项")]),e("li",[n._v("添加按钮，将输入框中的待办事项添加到待办数组中")]),e("li",[n._v("列表展示待办项目。")]),e("li",[n._v("每一条待办项目都可以完成或者取消（ui效果是完成，checkbox为true，文案添加中划线， 取消，checkbox为false，文案正常显示）")]),e("li",[n._v("每一条待办项目都有编辑和删除两个按钮，点击删除，从待办事项列表中删除此条待办项目，点击编辑，可直接编辑此条待办项目，")]),e("li",[n._v("添加搜索框，搜索到匹配的待办项目后，在列表中展示。")])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Page {\n\n  constructor() {\n    this.todolist = []; //初始化待办项目列表\n    this.searchlist = [];//初始化搜索列表\n    this.bottom = document.getElementsByClassName('bottom')[0]; // 获取待办事项列表ul\n    this.searchInput = document.getElementsByClassName('search-input')[0]; //获取搜索框\n  }\n  // 初始化\n  init() {\n    const addBtn = document.getElementsByClassName('add')[0]; //获取到添加按钮\n    const searchBtn = document.getElementsByClassName('search-btn')[0]; //获取到搜索按钮\n    addBtn.addEventListener('click', this.handleAddClick.bind(this));// 给添加按钮添加click事件\n    this.bottom.addEventListener('click', this.handleItemClick.bind(this));//给待办事项列表添加事件委托\n    searchBtn.addEventListener('click', this.handleSearchClick.bind(this));//给搜索按钮添加click事件\n  }\n  // 处理新增事项\n  handleAddClick() {\n    this.searchInput.value = '';\n    let input = document.getElementsByClassName('input')[0]; //获取输入框的值\n    let inputVal = input.value;\n    if (!inputVal) {\n      alert('输入值为空，请重新输入');\n      return;\n    }\n    this.todolist.push({ inputVal, checked: false }); //如果输入框的值非空，则添加数据对象至待办事项列表中\n    this.handleHtml(this.todolist); // 调用渲染html的方法，将待办事项列表渲染在界面中\n    input.value = '';\n  }\n  // 为listItem添加监听事件\n  handleItemClick(e) {\n    const index = e.target.parentNode.getAttribute('data-key'); //获取到事件委托对象的data-key值，作为被点击的待办事项的index值\n    switch(e.target.className) { // 根据被点击的元素的classname值，做出相应的处理\n      case 'del': \n        this.handleDelClick(index);\n        break;\n      case 'edit':\n        this.handleEditClick(e.target, index);\n        break;\n      case 'checkbox':\n        this.handleDoneClick(e.target, index);\n      case 'default':\n        break;\n    }\n  }\n  // 处理多选框点击事件 done\n  handleDoneClick(el, index) {\n    if (el.checked) {\n      el.nextElementSibling.classList.add(\"line-through\");\n      this.todolist.splice(index, 1, {...this.todolist[index], checked: true});\n    } else {\n      el.nextElementSibling.classList.remove(\"line-through\");\n      this.todolist.splice(index, 1, {...this.todolist[index], checked: false});\n    }\n  }\n  // 处理删除事件\n  handleDelClick(index) { //将被点击的元素删除，并重新渲染界面\n    this.todolist.splice(index, 1);\n    this.handleHtml(this.todolist);\n  }\n  // 处理编辑事件\n  handleEditClick(el, index) {\n    // 虚拟一个input框在span上面\n    let input = document.createElement('input'); //创建一个新的input节点\n    input.className = 'text-input'; // 给新创建的input节点添加classname\n    let textElement = el.previousElementSibling.previousElementSibling; //将待办事项的内容作为输入框的默认内容， 、、// 、、//previousElementSibling可以获取到同层级下，当前结点的上一个结点\n    input.value = textElement.innerHTML;\n    textElement.classList.add('display');\n    el.parentNode.insertBefore(input, el); //将当前的输入框插入到编辑元素的前边\n    input.focus(); //自动获取焦点\n    input.addEventListener('blur', () => { //设置当失去焦点后的回调\n      textElement.innerHTML = input.value; // 将编辑的值改成输入框中的值\n      this.todolist.splice(index, 1, {...this.todolist[index], inputVal: input.value}); \n      textElement.classList.remove('display');\n      el.parentNode.removeChild(input); // 删除掉输入框\n    });\n    return;\n  }\n  // 处理搜索事件\n  handleSearchClick() {\n    let inputVal = this.searchInput.value;\n    if (this.todolist.length === 0) {\n      alert('当前无事项，请添加事项……');\n      return;\n    }\n    if (!inputVal) {\n      alert('匹配值不能为空，请输入具体内容……');\n      return;\n    }\n    const reg = new RegExp(inputVal);\n    this.searchlist = this.todolist.filter( ({inputVal})=>{\n      return reg.test(inputVal);\n    }); //筛选数组，获取到可以匹配指定搜索内容的待办事项\n    this.handleHtml(this.searchlist);\n  }\n  // 处理html;\n  handleHtml(list) {\n    let html = '';\n    list.forEach(({inputVal, checked}, index) => {\n      html += `\n      <li data-key=\"${index}\">\n        <input class=\"checkbox\" type=\"checkbox\" name=\"checkbox\" ${checked ? 'checked' : ''}>\n        <span class=\"text ${checked ? 'line-through' : ''}\">${inputVal}</span>\n        <a class=\"del\">删除</a>\n        <a class=\"edit\">编辑</a>\n      </li>\n    `\n    });\n    this.bottom.innerHTML = html;\n  }\n}\nvar page = new Page()\npage.init();\n")])])]),e("h3",{attrs:{id:"html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html","aria-hidden":"true"}},[n._v("#")]),n._v(" HTML")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>todoList-youran</title>\n  <link rel="stylesheet" type="text/css" href="./todoList.css">\n</head>\n<body>\n  <div class="todoList">\n    <div class="top">\n      <input class="input" type="text" value="" placeholder="请输入……"/>\n      <a class="add" href="javascript:;">点击添加新事项</a>\n    </div>\n    <ul class="bottom"></ul>\n    <div class="search">\n      <input class="search-input" type="text" value="" placeholder="请输入关键字……"/>\n      <a class="search-btn" href="javascript:;">过滤</a>\n    </div>\n  </div>\n  <script src="./todoList.js"><\/script>\n</body>\n</html>\n')])])]),e("h3",{attrs:{id:"css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css","aria-hidden":"true"}},[n._v("#")]),n._v(" CSS")]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("* {\n  margin: 0;\n  padding: 0;\n}\nli {\n  list-style: none;\n}\na {\n  color: #000;\n  text-decoration: none;\n}\na:hover {\n  color: #fff;\n}\ninput {\n  background: none;  \n\toutline: none;  \n\tborder: 0px;\n}\nhtml, body {\n  background: #f7f7f7;\n  font-size: 14px;\n  font-style: normal;\n}\n.todoList {\n  width: 500px;\n  height: 440px;\n  margin: 20px auto;\n  background: #ddd;\n  /* border: 1px solid salmon; */\n  border-radius: 3px;\n}\n.top,\n.search {\n  height: 50px;\n  line-height: 50px;\n  /* background: #ff5200; */\n  background: salmon;\n  border-radius: 3px;\n  padding: 0 10px;\n}\n.search {\n  margin-top: -3px;\n}\n.top .input,\n.search-input {\n  width: 300px;\n  height: 30px;\n  background: #fff;\n  border-radius: 3px;\n  padding-left: 10px;\n}\n.add,\n.search-btn {\n  float: right;\n  width: 120px;\n  padding: 0 10px;\n}\n.bottom {\n  height: 380px;\n  /* overflow: hidden; */\n  overflow: scroll;\n  padding-top: 10px;\n  /* padding: 10px 0; */\n}\n.bottom li {\n  padding: 10px;\n  margin-bottom: 10px;\n  line-height: 24px;\n  border-radius: 3px;\n  color: #fff;\n  background: salmon;\n}\n.bottom .text-input {\n  font-size: 16px;\n  width: 380px;\n  color: #fff;\n  background: salmon;\n}\n.bottom li:nth-child(2n-1),\n.bottom li:nth-child(2n-1) .text-input{\n  background: #fff;\n  color: salmon;\n}\n.edit,\n.del {\n  float: right;\n  margin-left: 10px;\n  cursor: pointer;\n}\n.edit:hover,\n.del:hover {\n  color: #409eff;\n}\n.display {\n  display: none;\n}\n.line-through {\n  text-decoration: line-through;\n}\n\n")])])])])}],!1,null,null,null);t.default=a.exports}}]);