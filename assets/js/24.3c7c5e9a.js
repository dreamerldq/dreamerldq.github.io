(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{143:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"webpack-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-配置","aria-hidden":"true"}},[t._v("#")]),t._v(" webpack 配置")]),a("blockquote",[a("p",[t._v("webpack typescript + react + less 配置详解")])]),a("hr"),a("p",[t._v("需要用到的包有")]),a("ul",[a("li",[t._v("babel-loader")]),a("li",[t._v("babel-preset-env")]),a("li",[t._v("babel-preset-react")]),a("li",[t._v("css-loader")]),a("li",[t._v("style-loader")]),a("li",[t._v("less-loader")]),a("li",[t._v("less")]),a("li",[t._v("ts-loader")]),a("li",[t._v("html-webpack-plugin")]),a("li",[t._v("typescript")]),a("li",[t._v("@types/react")]),a("li",[t._v("@types/react-dom")]),a("li",[t._v("react-router-dom")])]),a("hr"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    entry: path.join(__dirname, \"src/index.tsx\")\n\toutput: {\n\t\t\tpath: path.join(__dirname, 'dist'),\n\t\t\tfilename: 'index_bundle.js',\n\t\t\tpublicPath: '/'\n\t}\n")])])]),a("p",[t._v("entry 指定打包文件的入口，从这个入口文件开始递归遍历所有的依赖包，形成一个依赖树")]),a("p",[t._v("output")]),a("p",[t._v("path 指定打包后文件存放的位置")]),a("p",[t._v("filename 指定构建完成后文件的名称")]),a("p",[t._v("publikPath 指定公共资源文件的位置")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tplugins: [htmlWebpackPlugin]\n\t\n\tconst HtmlWebpackPlugin = require("html-webpack-plugin");\n\tconst htmlWebpackPlugin = new HtmlWebpackPlugin({\n\t    template: path.join(__dirname, "public/index.html"),\n\t    filename: "index.html"\n\t});\n')])])]),a("p",[t._v("引入HtmlWebpackPlugin这个插件。这个插件可以自动帮你在打包生成的文件目录下创建一个html文件，免去了自己手动创建html文件引入打包后JS文件的过程")]),a("p",[t._v("template 指定一个html的模板，这样在自动生成的html文件中，都会引入模板中拥有的css、js、等文件")]),a("p",[t._v("filename 指定自动生成的html文件的名称")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tmodule: {\n\t    rules: [\n\t        {\n\t            test: /\\.(js|jsx)$/,\n\t            use: [\n\t                {loader: 'babel-loader'}\n\t            ],\n\t            exclude: /node_modules/\n\t        }\n\t    ]\n\t}\n")])])]),a("p",[t._v("loader是webpack中的关键，所有的代码转译的过程都是通过它来实现")]),a("p",[t._v("上面这段代码简单的配置了babel。")]),a("p",[t._v("babel是一个js的编译器，能够将一些ES6+ 的语法，通过babel转换成低版本的JS语法，能够让更多的浏览器支持。")]),a("p",[t._v("babel在转译的过程中，会先出在项目中查找一个叫做 .babelrc的文件，这个文件用配置bebel规则")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t{\n\t"presets": [\n\t    "env",\n\t    "react"\n\t],\n\t"plugins": [\n\t  "transform-class-properties",\n\t  ["import", { "libraryName": "antd", "style": "css" }]\n\t]\n\t}\n')])])]),a("p",[t._v("presets 用来指定需要转译的语言。 env 是指 ES5+ 的所有的JS语言版本")]),a("p",[t._v("plugins 可以用这个对象来配置一些插件")]),a("p",[t._v("transform-class-properties  这个插件可以以这样的方式在ES6 Class中的声明方法，而不需要去使用bind绑定。")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tchangeType = (type: string) => () => {\n\tthis.props.changeType(type)\n\t}\n")])])]),a("p",[t._v("因为Class默认不绑定this")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tcomponentDidMount() {\n\t\tif (this.props.match.path === \'/todo\') {\n\t\t\t\tthis.props.fetchNews()\n\t\t\t}\n\t\t}\n\n\tchangeType(type: string) {\n\t\treturn () => this.props.changeType(type)\n\t}\n\n ["import", { "libraryName": "antd", "style": "css" }] 是一个按需加载的插件，能够让antd UI组件 按需加载。\n')])])]),a("p",[t._v("转译typescript文件")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t{\n\t\ttest: /\\.(ts|tsx)$/,\n\t\tuse: [\n\t\t\t{ loader: 'babel-loader' },\n\t\t\t{ loader: 'ts-loader' }\n\t\t],\n\t\texclude: /node_modules/\n\t}\n")])])]),a("p",[t._v("test用来匹配需要转译的文件，用正则表达式来完成匹配\nuse 是一个数组，用来指定转译时需要用到的loader。\nexclude 用来指定不需要检测转译的文件")]),a("p",[t._v("less配置")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t{\n\t\ttest: /\\.less$/,\n\t\tuse: [\n\t\t\t{ loader: 'style-loader'},\n\t\t\t{loader: 'typings-for-css-modules-loader',\n\t\t\toptions: {\n\t\t\t\tmodules: true,\n\t\t\t\tnamedExport: true,\n\t\t\t\tcamelCase: true,\n\t\t\t\tminimize: true,\n\t\t\t\timportLoaders: 1,\n\t\t\t\tlocalIdentName: \"[local]_[hash:base64:5]\"\n\t\t\t}\n\t\t\t},\n\t\t\t{ loader: 'less-loader'}\n\t\t],\n\t\texclude: /node_modules/\n    }\n")])])]),a("p",[t._v("resolve 配置")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\tresolve: {\n        extensions: [".js", ".jsx", ".ts", ".tsx", "less", "css"]\n    }\n')])])]),a("p",[t._v("这样在用import引用其他模块的时候，在不输入文件后缀的情况下，webpack会按照上面extensions中的顺序遍历，直到找到第一个匹配到的文件停止\t\nwebpack-dev-server 配置")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tdevServer: {\n        port: 7000,\n        historyApiFallback: true,\n    }\n")])])]),a("p",[t._v("port指定端口号\nhistoryApiFallback")])])}],!1,null,null,null);e.default=n.exports}}]);